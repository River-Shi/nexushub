syntax = "proto3";

package marketdata;

// Request message to subscribe to a specific stream
message SubscriptionRequest {
  string event_type = 1; // e.g., "kline", "trade", "bookticker"
  repeated string symbols = 2; // e.g., ["BTCUSDT", "ETHUSDT"]
  optional string interval = 3; // Required for kline streams, e.g., "1m", "5m", "1h"
}

// Represents a single Kline (candlestick)
message Kline {
  string event_type = 1;        // Corresponds to "e"
  int64 event_time = 2;         // Corresponds to "E"
  int64 start_time = 3;         // Corresponds to "k.t"
  int64 close_time = 4;         // Corresponds to "k.T"
  string symbol = 5;            // Corresponds to "ps"
  string interval = 6;          // Corresponds to "k.i"
  int64 first_trade_id = 7;   // Corresponds to "k.f"
  int64 last_trade_id = 8;    // Corresponds to "k.L"
  string open_price = 9;        // Corresponds to "k.o"
  string close_price = 10;       // Corresponds to "k.c"
  string high_price = 11;        // Corresponds to "k.h"
  string low_price = 12;        // Corresponds to "k.l"
  string volume = 13;           // Corresponds to "k.v"
  int64 number_of_trades = 14;  // Corresponds to "k.n"
  bool is_closed = 15;          // Corresponds to "k.x"
  string quote_asset_volume = 16;// Corresponds to "k.q"
  string taker_buy_volume = 17; // Corresponds to "k.V"
  string taker_buy_quote_volume = 18; // Corresponds to "k.Q"
  int64 timestamp = 19; // nanoseconds
}

// Represents a single Trade
message Trade {
  int64 event_time = 1;
  string symbol = 2;
  int64 trade_id = 3;
  string price = 4;
  string quantity = 5;
  int64 trade_time = 6;
  bool is_buyer_maker = 7;
}

// Represents an aggregated trade
message AggTrade {
  string event_type = 1;        // Corresponds to "e"
  int64 event_time = 2;         // Corresponds to "E"
  string symbol = 3;            // Corresponds to "s"
  int64 trade_id = 4; // Corresponds to "a"
  string price = 5;             // Corresponds to "p"
  string quantity = 6;          // Corresponds to "q"
  int64 first_trade_id = 7;     // Corresponds to "f"
  int64 last_trade_id = 8;      // Corresponds to "l"
  int64 trade_time = 9;         // Corresponds to "T"
  bool is_buyer_maker = 10;     // Corresponds to "m"
}

// Represents the best bid/ask price and quantity for a symbol
message BookTicker {
  string event_type = 1;        // Corresponds to "e"
  int64 update_id = 2;          // Corresponds to "u"
  string symbol = 3;            // Corresponds to "s"
  string pair = 4;              // Corresponds to "ps"
  string bid_price = 5;         // Corresponds to "b"
  string bid_qty = 6;           // Corresponds to "B"
  string ask_price = 7;         // Corresponds to "a"
  string ask_qty = 8;           // Corresponds to "A"
  int64 transaction_time = 9;    // Corresponds to "T"
  int64 event_time = 10;        // Corresponds to "E"
}

// Response message carrying market data
message MarketDataResponse {
  string stream_name = 1; // The stream this data belongs to
  oneof data {
    Kline kline = 2;
    Trade trade = 3;
    AggTrade agg_trade = 4;
    BookTicker book_ticker = 5; // Add BookTicker here
  }
}

// The gRPC service definition
service MarketDataStreamer {
  // Client subscribes, server streams data
  rpc SubscribeMarketData (SubscriptionRequest) returns (stream MarketDataResponse) {}
}
